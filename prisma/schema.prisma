// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  CREATOR
  MEMBER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  image         String?
  emailVerified DateTime?
  role          Role      @default(MEMBER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  kitchen   Kitchen?  @relation(fields: [kitchenId], references: [id], onDelete: SetNull)
  kitchenId String?
  bookings  Booking[]
  accounts  Account[]
  sessions  Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Note: When adding the functionality for a user to leave a kitchen, check whether the kitchen will be empty after they leave, and delete it if this is the case.

model Kitchen {
  id        String @id @default(cuid())
  shortCode String @unique @db.VarChar(8)
  name      String

  cookers Cooker[]
  users   User[]
}

model Oven {
  id              String @id @default(cuid())
  name            String
  numberOfShelves Int

  bookings Booking[]
  cookerId String
  cooker   Cooker    @relation(fields: [cookerId], references: [id], onDelete: Cascade)
}

model Cooker {
  id   String @id @default(cuid())
  name String

  kitchenId String
  kitchen   Kitchen @relation(fields: [kitchenId], references: [id], onDelete: Cascade)

  burners Burner[]
  ovens   Oven[]
}

model Burner {
  id   String @id @default(cuid())
  name String

  cookerId String
  cooker   Cooker @relation(fields: [cookerId], references: [id], onDelete: Cascade)

  bookings Booking[]
}

model Booking {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  oven   Oven?   @relation(fields: [ovenId], references: [id])
  ovenId String?
  numberOfShelves Int?
  temperature Int?

  burner   Burner? @relation(fields: [burnerId], references: [id])
  burnerId String?

  startDateTime DateTime
  endDateTime   DateTime
}
